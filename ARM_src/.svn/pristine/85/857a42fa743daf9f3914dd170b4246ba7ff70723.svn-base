#include <core/Timer/etimer.h>
#include <core/protocol/Secure/sha1/sha1.h>
#include <core/Debug/Debug_Terminal.h>
#include <core/Thread/pt.h>
#include <Device/I2C/RFID/RFID.h>
#include <Device/I2C/RFID/RFID_Pass.h>
#include <Core/Clock/Time_functions.h>
#include <Core/protocol/Net/SCP/SCP_Comm.h>

struct pt RFID_pass_pt;
struct pt RFID_sub_pt;

const char RFID_SALT[7] = {0xf8,0x0f,0x81,0xa5,0x20,0x49,0xf2};
extern int8_t RFID_Semafoor ;

void RFID_calc_unlock_code(RFID_card_t * reader, uint8_t * hash);
void RFID_calc_old_unlock_code(RFID_card_t * reader, uint8_t * hash, uint8_t version);

PT_THREAD(_RFID_Check_Unlock_Code(RFID_card_t * reader, bool * succes, process_event_t ev, process_data_t data))
{
	PT_BEGIN(&RFID_pass_pt);
	char card_data[16];
	*succes = false;
	reader->info.Unlock_code_ok = false;
	PT_SPAWN(&RFID_pass_pt,&pt_RFID_send_data,RFID_Read_Data(reader, UNLOCK_CODE_BLOCK,KeyA,0,card_data));

	uint8_t hash[SHA1_HASH_SIZE];
	RFID_calc_unlock_code(reader, hash);

	if(memcmp(hash,card_data,16) == 0){
		reader->info.Unlock_code_ok = true;
	}

	if(reader->info.Unlock_code_ok == false ){
		RFID_calc_old_unlock_code(reader, hash, reader->info.card_version);
		if(memcmp(hash,card_data,16) == 0){
			reader->info.Unlock_code_ok = true;
		}
	}


	printf("RFID: unlock code %s\r\n",reader->info.Unlock_code_ok == true?"ok":"failed");


	if(RFID_card_present(reader)){
		*succes = true;
	}
	reader->card_present = true;

	PT_END(&RFID_pass_pt);
}

PT_THREAD(_RFID_Get_Info(RFID_card_t * reader, bool * succes, process_event_t ev, process_data_t data))
{
	PT_BEGIN(&RFID_pass_pt);
	char card_data[16];
	time_t Start_tm = 0, End_tm = 0;
	uint8_t check , i;
	*succes = false;
	reader->info.Language = NOT_SET;
	PT_SPAWN(&RFID_pass_pt,&pt_RFID_send_data,RFID_Read_Data(reader, INFO_BLOCK,KeyA,0,card_data));

	if(card_data[LANGUAGE_BYTE] == 0){
		reader->info.Language = NOT_SET;
	}else if(card_data[LANGUAGE_BYTE] <= NOT_SET){
		reader->info.Language = (card_data[LANGUAGE_BYTE] - 1);
	}else{
		reader->info.Language = NOT_SET;
	}

	reader->info.last_mod_nr = card_data[MOD_NR_BYTE];
	reader->info.card_version = card_data[CARD_VERSION_BYTE];


	memmove(&Start_tm,&card_data[START_END_DATE],4);
	memmove(&End_tm,&card_data[START_END_DATE+4],4);

	reader->info.Start_date = *gmtime(&Start_tm);
	reader->info.End_date = *gmtime(&End_tm);
	reader->info.Date_ok = CurTime_in_periode(reader->info.Start_date, reader->info.End_date, false) == 0 ? true:false;

	if(card_data[AUTH_LEV_BYTE] == 0){
		reader->info.auth_lev = 0;
		printf ( "Auth: no\r\n");
	}else{
		reader->info.auth_lev = card_data[AUTH_LEV_BYTE] - 1;
		reader->action.Unlock_code_read = true;
	}

	check = 1;
	for(i=0;i<15;i++){
		check ^= card_data[i];
	}

	if(check != card_data[15]){
		reader->info.Date_ok = false;
		printf("RFID: crc failed\r\n");
	}else{
		printf ( "RFID: Start date: %s ", asctime (LocalTime(&reader->info.Start_date)) );
		printf ( "End date: %s ", asctime (LocalTime(&reader->info.End_date)) );
		printf ( "Auth: %d\r\n", reader->info.auth_lev);
		*succes = true;
	}

	if(RFID_card_present(reader)){
		*succes = true;
	}
	reader->card_present = true;

	PT_END(&RFID_pass_pt);
}

void RFID_calc_old_unlock_code(RFID_card_t * reader, uint8_t * hash, uint8_t version){
	SHA1Context Pass_SHA;
	SHA1Init(&Pass_SHA);
	SHA1Update(&Pass_SHA, reader->card_UID.UID, 7);
	SHA1Update(&Pass_SHA, RFID_SALT, 7);
	SHA1Final(&Pass_SHA, hash);
	return;
}

void RFID_calc_unlock_code(RFID_card_t * reader, uint8_t * hash){
	SHA1Context Pass_SHA;
	uint8_t location;
	SHA1Init(&Pass_SHA);
	SHA1Update(&Pass_SHA, reader->card_UID.UID, 7);
	SHA1Update(&Pass_SHA, &reader->info.auth_lev, 1);
	location = SCP_Get_device_info().SCP_locnr;
	if(reader->info.auth_lev < 2){
		SHA1Update(&Pass_SHA, &location, 1);
	}
	SHA1Update(&Pass_SHA, RFID_SALT, 7);
	SHA1Final(&Pass_SHA, hash);
	return;
}

PT_THREAD(_RFID_Write_Unlock_Code(RFID_card_t * reader, bool * succes,process_event_t ev, process_data_t data))
{
	char card_data[16];
	uint8_t hash[SHA1_HASH_SIZE];

	PT_BEGIN(&RFID_pass_pt);
	*succes = false;

	RFID_calc_unlock_code(reader,hash);

	PT_SPAWN(&RFID_pass_pt,&pt_RFID_send_data,RFID_Write_Data(reader, UNLOCK_CODE_BLOCK ,KeyA ,0 ,(char *)hash));
	PT_SPAWN(&RFID_pass_pt,&pt_RFID_send_data,RFID_Read_Data(reader, UNLOCK_CODE_BLOCK,KeyA,0,card_data));

	RFID_calc_unlock_code(reader,hash);

	//check data
	if(memcmp(card_data, hash, 16) != 0){
		*succes = false;
		printf("RFID: write lock FAILED!\r\n");
		PT_EXIT(&RFID_pass_pt);
	}

	reader->action.Unlock_code_write = false;
	*succes = true;
	printf("RFID: write lock OK\r\n");
	PT_END(&RFID_pass_pt);
}

PT_THREAD(_RFID_Set_Info(RFID_card_t * reader, bool * succes, process_event_t ev, process_data_t data))
{
	char card_data[16];
	uint8_t i;
	time_t Start_tm, End_tm;

	PT_BEGIN(&RFID_pass_pt);
	*succes = false;


	card_data[LANGUAGE_BYTE] = (reader->info.Language + 1);
	card_data[MOD_NR_BYTE] = reader->info.last_mod_nr;

	printf ( "RFID: Write Start date: %s ", asctime (LocalTime(&reader->info.Start_date)) );
	printf ( "End date %s\r\n", asctime (LocalTime(&reader->info.End_date)) );
	Start_tm = mktime(&reader->info.Start_date);
	End_tm = mktime(&reader->info.End_date);
	memset(&card_data[START_END_DATE],0,8);

	memmove(&card_data[START_END_DATE],&Start_tm,4);
	memmove(&card_data[START_END_DATE+4],&End_tm,4);
	card_data[START_END_DATE+4]= 0;
	card_data[AUTH_LEV_BYTE] = reader->info.auth_lev + 1;
	card_data[CARD_VERSION_BYTE] = CURRENT_CARD_V;

	card_data[15] = 1;
	for(i=0;i<15;i++){
		card_data[15] ^= card_data[i];
	}

	PT_SPAWN(&RFID_pass_pt,&pt_RFID_send_data,RFID_Write_Data(reader, INFO_BLOCK ,KeyA ,0 ,card_data));


	//check data
	if((reader->status_flag & 0xCF) != 0x86){
		*succes = false;
		printf("RFID: write info FAILED!\r\n");
		PT_EXIT(&RFID_pass_pt);
	}

	reader->action.Info_write = false;
	*succes = true;
	printf("RFID: write info OK\r\n");
	PT_END(&RFID_pass_pt);
}
