#include "SCP_msg.h"
#include <string.h>
#include <time.h>
#include <Board/Def_config.h>
#include <Core/Util/build_defs.h>
#include <Core/Peripherals/Net_Dev_Init.h>
#include <Core/Memory/cmem.h>
#include <version.h>

uint8_t SCP_hex_to_dec(uint8_t hex){
	uint8_t value;
	uint8_t min;
	value = hex;
	min = (value/256)*(96);
	value %= 256;
	min += (value/16)*(6);
	value -= min;
	return value;
}

char * SCP_varname_array(char * buffer, char * varname, uint8_t index){
	sprintf(buffer,"%s[%d]",varname,index);
	return buffer;
}

int16_t SCP_array_number(char * Name){
	char * begin;
	char * end;
	begin = memchr ( Name, '[', strlen(Name) );
	end = memchr ( Name, ']', strlen(Name) );
	if((begin == NULL)||(end == NULL))
		return -1;
	if((end < begin)||((end - begin)>4))
		return -1;
	return atoi(begin+1);
}


/*1-msg_RFID_Present*/
/*401-msg_QR_present*/
SCP_Data_t SCP_msg_Present(UID_t UID, uint8_t machine_type){
	SCP_Data_t Packet;
	if(UID.type == RFID_UID){
		Packet.Message_type = msg_RFIDPresent;
	}else if(UID.type == QR_UID){
		Packet.Message_type = msg_QR_present;
	}else{
		Packet = SCP_msg_Error();
		return Packet;
	}
	memmove(Packet.UID,UID.UID,7);
	Packet.Value[0] = 0;
	Packet.Value[1] = machine_type;
	Packet.Text = NULL;
	return Packet;
}


/*11-msg_RFID_BijEuro*/
/*411-msg_QR_BijEuro*/
SCP_Data_t SCP_msg_BijEuro(UID_t UID,int32_t Centen_Bij,msg_Reason_t Reason){
	SCP_Data_t Packet;
	if(UID.type == RFID_UID){
		Packet.Message_type = msg_RFID_BijEuro;
	}else if(UID.type == QR_UID){
		Packet.Message_type = msg_QR_BijEuro;
	}else{
		Packet = SCP_msg_Error();
		return Packet;
	}
	memmove(Packet.UID,UID.UID,7);
	Packet.Value[0] = Reason;
	Packet.Value[1] = Centen_Bij;
	Packet.Text = NULL;
	return Packet;
}

/*12-msg_RFID_AfEuro*/
/*412-msg_QR_AfEuro*/
SCP_Data_t SCP_msg_AfEuro(UID_t UID,int32_t Centen_af){
	SCP_Data_t Packet;
	if(UID.type == RFID_UID){
		Packet.Message_type = msg_RFID_AfEuro;
	}else if(UID.type == QR_UID){
		Packet.Message_type = msg_QR_AfEuro;
	}else{
		Packet = SCP_msg_Error();
		return Packet;
	}
	memmove(Packet.UID,UID.UID,7);
	Packet.Value[0] = 0;
	Packet.Value[1] = Centen_af;
	Packet.Text = NULL;
	return Packet;
}

/*13-msg_RFID_MeldEuro*/
/*413-msg_QR_MeldEuro*/
SCP_Data_t SCP_msg_MeldEuro(UID_t UID){
	SCP_Data_t Packet;
	if(UID.type == RFID_UID){
		Packet.Message_type = msg_RFID_MeldEuro;
	}else if(UID.type == QR_UID){
		Packet.Message_type = msg_QR_MeldEuro;
	}else{
		Packet = SCP_msg_Error();
		return Packet;
	}
	memmove(Packet.UID,UID.UID,7);
	Packet.Value[0] = 0;
	Packet.Value[1] = 0;
	Packet.Text = NULL;
	return Packet;
}


/*15-msg_OpenPoort*/
int32_t SCP_msg_OpenPoort__Poort(SCP_pack_t * Packet){
	return Packet->Data.Value[1];
}

gate_action_t SCP_msg_OpenPoort__Action(SCP_pack_t * Packet){
	return (gate_action_t) Packet->Data.UID[0];
}

/*17-msg_GeefKaart*/
SCP_Data_t SCP_msg_Geefkaart(UID_t UID){
	SCP_Data_t Packet;
	Packet.Message_type = msg_GeefKaart;
	memmove(Packet.UID,UID.UID,7);
	Packet.Value[0] = 0;
	Packet.Value[1] = 0;
	Packet.Text = NULL;
	return Packet;
}

/*18-msg_RFID_Betaald*/
/*418-msg_QR_Betaald*/
SCP_Data_t SCP_msg_Betaald(UID_t UID, int32_t Centen){
	SCP_Data_t Packet;
	if(UID.type == RFID_UID){
		Packet.Message_type = msg_RFID_Betaald;
	}else if(UID.type == QR_UID){
		Packet.Message_type = msg_QR_Betaald;
	}else if(UID.type == NONE_UID){
		Packet.Message_type = msg_Betaald;
	}else{
		Packet = SCP_msg_Error();
		return Packet;
	}
	memmove(Packet.UID,UID.UID,7);
	Packet.Value[0] = 0;
	Packet.Value[1] = Centen;
	Packet.Text = NULL;
	return Packet;
}

/*21-msg_RFID_BijEuroOk*/
int32_t SCP_msg_BijEuroOk__Centen(SCP_pack_t * Packet){
	return Packet->Data.Value[0];
}

/*22-msg_RFID_AfEuroOk*/
int32_t SCP_msg_AfEuroOk__Centen(SCP_pack_t * Packet){
	return Packet->Data.Value[0];
}

/*23-msg_RFID_HuidigEuro*/
uint8_t SCP_msg_HuidigEuro__User(SCP_pack_t * Packet){
	return Packet->Data.UID[0];
}

int32_t SCP_msg_HuidigEuro__Centen(SCP_pack_t * Packet){
	return Packet->Data.Value[1];
}

/*25-msg_OpenPoortOk*/
SCP_Data_t SCP_msg_OpenPoortOk(void){
	SCP_Data_t Packet;
	Packet.Message_type = msg_OpenPoortOk;
	memset (Packet.UID,0,7);
	Packet.Value[0] = 0;
	Packet.Value[1] = 0;
	Packet.Text = NULL;
	return Packet;
}

/*26-msg_ResetOk*/
SCP_Data_t SCP_msg_ResetOk(void){
	SCP_Data_t Packet;
	Packet.Message_type = msg_ResetOk;
	memset (Packet.UID,0,7);
	Packet.Value[0] = 0;
	Packet.Value[1] = 0;
	Packet.Text = NULL;
	return Packet;
}

/*29-msg_RFID_Language*/
/*429-msg_QR_Language*/
SCP_Data_t SCP_msg_Language(UID_t UID, Language_t language){
	SCP_Data_t Packet;
	if(UID.type == RFID_UID){
		Packet.Message_type = msg_RFID_Language;
	}else if(UID.type == QR_UID){
		Packet.Message_type = msg_QR_Language;
	}else{
		Packet = SCP_msg_Error();
		return Packet;
	}
	memmove(Packet.UID,UID.UID,7);
	Packet.Value[0] = language;
	Packet.Value[1] = 0;
	Packet.Text = NULL;
	return Packet;
}

/*33-msg_Betaal*/
int32_t SCP_msg_Betaal__Centen(SCP_pack_t * Packet){
	return Packet->Data.Value[1];
}

/*34-msg_Retour*/
SCP_Data_t SCP_msg_Retour(int32_t centen){
	SCP_Data_t Packet;
	Packet.Message_type = msg_Retour;
	memset (Packet.UID,0,7);
	Packet.Value[0] = 0;
	Packet.Value[1] = centen;
	Packet.Text = NULL;
	return Packet;
}

/*42-msg_Akkoord*/
uint8_t SCP_msg_Akkoord__User(SCP_pack_t * Packet){
	return Packet->Data.UID[0];
}

int32_t SCP_msg_Akkoord__Poort(SCP_pack_t * Packet){
	return Packet->Data.UID[1];
}

bool SCP_msg_Akkoord__Trash(SCP_pack_t * Packet){
	return (Packet->Data.UID[2] & (1 << 0));
}

int32_t SCP_msg_Akkoord__ResvNr(SCP_pack_t * Packet){
	return Packet->Data.Value[1];
}




/*43-msg_Error*/

SCP_Data_t SCP_msg_Error(void){
	SCP_Data_t Packet;
	Packet.Message_type = msg_Error;
	memset (Packet.UID,0,7);
	Packet.Value[0] = 0;
	Packet.Value[1] = 0;
	Packet.Text = NULL;
	return Packet;
}

/*46-msg_NietAkkoord*/
uint8_t SCP_msg_NietAkkoord__User(SCP_pack_t * Packet){
	return Packet->Data.UID[0];
}

bool SCP_msg_NietAkkoord__Trash(SCP_pack_t * Packet){
	return (Packet->Data.UID[2] & (1 << 0));
}

int32_t SCP_msg_NietAkkoord__ResvNr(SCP_pack_t * Packet){
	return Packet->Data.Value[1];
}

/*47-msg_Blokkade*/


/*61-msg_DevInfo*/
SCP_Data_t SCP_msg_DevInfo(SCP_DevInfo_t DevInfo){
	SCP_Data_t Packet;
	uint8_t printstackpointer;
	void * ptr = malloc(64);
	uint32_t rest = (uint32_t)&printstackpointer - (uint32_t)ptr;
	free(ptr);

	Packet.Message_type = msg_DevInfo;
	memset(Packet.UID,0,7);
	Packet.UID[0] = DevInfo.SCP_locnr;
	Packet.UID[1] = DevInfo.SCP_modnr;
	Packet.UID[2] = DevInfo.SCP_grID;
	/*
	Packet.UID[3] = (DevInfo->SCP_dev_status >> 8) & 0xff;
	Packet.UID[4] = (DevInfo->SCP_dev_status)& 0xff;
	*/
	Packet.Value[0] = rest;
	Packet.Value[1] = 0;
	Packet.Text = NULL;
	return Packet;
}

/*63-msg_DevInfoOk*/
SCP_Data_t SCP_msg_DevInfoOk(SCP_DevInfo_t DevInfo){
	SCP_Data_t Packet;
	Packet.Message_type = msg_DevInfoOk;
	memset (Packet.UID,0,7);
	Packet.UID[0] = DevInfo.SCP_locnr;
	Packet.UID[1] = DevInfo.SCP_modnr;
	Packet.UID[2] = DevInfo.SCP_grID;
	Packet.Value[0] = 0;
	Packet.Value[1] = 0;
	Packet.Text = NULL;
	return Packet;
}

void SCP_msg_DevInfoOk__DevInfo(SCP_pack_t * Packet, SCP_DevInfo_t * DevInfo){
	DevInfo->SCP_devID = Packet->Dest_device;
	DevInfo->SCP_locnr = Packet->Data.UID[0];
	DevInfo->SCP_modnr = Packet->Data.UID[1];
	DevInfo->SCP_grID = Packet->Data.UID[2];
	return;
}

void SCP_msg_DevInfoOk__Setting(SCP_pack_t * Packet, SCP_DevInfo_t * DevInfo){
	//if(DevInfo->Data.Setting != Packet->Data.UID[3]){
		// process_post(PROCESS_BROADCAST, event_SCP, Packet);
	 //}
	 //DevInfo->Data.Setting = Packet->Data.UID[3];
	//TODO:settings
	 return;
}

/*64-msg_CashStatus*/
SCP_Data_t SCP_msg_CashStatus(SCP_Data_t value){
	SCP_Data_t Packet;
	Packet.Message_type = msg_CashStatus;
	memmove(Packet.UID,value.UID,7);
	Packet.Value[0] = value.Value[0];
	Packet.Value[1] = value.Value[1];
	Packet.Text = NULL;
	return Packet;
}

/*66-msg_Boot*/
SCP_Data_t SCP_msg_Boot(SCP_DevInfo_t DevInfo){
	SCP_Data_t Packet;
	uint16_t Build_rev_nr;

	Packet.Message_type = msg_Boot;
	memset (Packet.UID,0,7);
	Packet.UID[0] = DevInfo.SCP_locnr;
	Packet.UID[1] = DevInfo.SCP_modnr;
	Packet.UID[2] = DevInfo.SCP_grID;

	Build_rev_nr = atoi((char *)Build_Revision);

	Packet.UID[3] = MAJOR_VERSION;
	Packet.UID[4] = ((Build_rev_nr>>8) & 0xFF);
	Packet.UID[5] = (Build_rev_nr & 0xFF);
	Packet.UID[6] = 0;
	Packet.Value[0] = get_build_date_number();
	Packet.Value[1] = get_build_time_number();
	Packet.Text = cmem_malloc(60);

	unsigned Serial_Number[5];
	read_serial_number(Serial_Number);
	snprintf(Packet.Text,60,"%08X_%08X_%08X_%08X V%d.%d.%s%s",Serial_Number[1],Serial_Number[2],Serial_Number[3],Serial_Number[4],MAJOR_VERSION,MINOR_VERSION,Build_Revision,Version_state);

	return Packet;
}

void SCP_msg_Boot__DevInfo(SCP_pack_t * Packet, SCP_DevInfo_t * DevInfo){
	DevInfo->SCP_devID = Packet->Dest_device;
	DevInfo->SCP_locnr = Packet->Data.UID[0];
	DevInfo->SCP_modnr = Packet->Data.UID[1];
	DevInfo->SCP_grID = Packet->Data.UID[2];
	return;
}

/*67-msg_BootOk*/
SCP_Data_t SCP_msg_BootOk(SCP_DevInfo_t  DevInfo){
	SCP_Data_t Packet;
	Packet.Message_type = msg_BootOk;
	memset (Packet.UID,0,7);
	Packet.UID[0] = DevInfo.SCP_locnr;
	Packet.UID[1] = DevInfo.SCP_modnr;
	Packet.UID[2] = DevInfo.SCP_grID;
	Packet.Value[0] = 0;
	Packet.Value[1] = 0;
	Packet.Text = NULL;
	return Packet;
}

/*71-msg_DeurOpen*/
SCP_Data_t SCP_msg_DeurOpen(void){
	SCP_Data_t Packet;
	Packet.Message_type = msg_DeurOpen;
	memset (Packet.UID,0,7);
	Packet.Value[0] = 0;
	Packet.Value[1] = 0;
	Packet.Text = NULL;
	return Packet;
}

/*72-msg_DeurDicht*/
SCP_Data_t SCP_msg_DeurDicht(void){
	SCP_Data_t Packet;
	Packet.Message_type = msg_DeurDicht;
	memset (Packet.UID,0,7);
	Packet.Value[0] = 0;
	Packet.Value[1] = 0;
	Packet.Text = NULL;
	return Packet;
}

/*77-msg_NoodCode*/
SCP_Data_t SCP_msg_NoodCode(bool daycode, bool noodcode){
	SCP_Data_t Packet;
	Packet.Message_type = msg_NoodCode;
	memset (Packet.UID,0,7);
	if(daycode == true){
		Packet.UID[5] = 0xFF;
	}
	if(noodcode == true){
		Packet.UID[6] = 0xFF;
	}
	Packet.Value[0] = 0;
	Packet.Value[1] = 0;
	Packet.Text = NULL;
	return Packet;
}

uint8_t SCP_msg_NoodCode__Noodcode(SCP_pack_t * Packet, char * code_str){
	uint8_t code_len = Packet->Data.UID[0];
	int32_t code = Packet->Data.Value[0];
	uint8_t i;

	for(i = 0; i < code_len; i++){
		code_str[i] = ((code>>(i*2))&0x03) + '0';
	}
	code_str[i] = '\0';
	return code_len;
}

uint8_t SCP_msg_NoodCode__Dagcode(SCP_pack_t * Packet, char * code_str){
	uint8_t code_len = Packet->Data.UID[1];
	int32_t code = Packet->Data.Value[1];
	uint8_t i;

	for(i = 0; i < code_len; i++){
		code_str[i] = ((code>>(i*2))&0x03) + '0';
	}
	code_str[i] = '\0';
	return code_len;
}

/*99-msg_Ok*/
SCP_Data_t SCP_msg_Ok(void){
	SCP_Data_t Packet;
	Packet.Message_type = msg_Ok;
	memset (Packet.UID,0,7);
	Packet.Value[0] = 0;
	Packet.Value[1] = 0;
	Packet.Text = NULL;
	return Packet;
}

/*111-msg_PinCode*/
SCP_Data_t SCP_msg_PinCode(uint8_t Code[7]){
	SCP_Data_t Packet;
	Packet.Message_type = msg_PinCode;
	memmove(Packet.UID,Code,7);
	Packet.Value[0] = 0;
	Packet.Value[1] = 0;
	Packet.Text = NULL;
	return Packet;
}

/*119-msg_ReserveringBetaal*/

int32_t SCP_msg_ReserveringBetaal__Centen(SCP_pack_t * Packet){
	return Packet->Data.Value[0];
}

int32_t SCP_msg_ReserveringBetaal__ResvNr(SCP_pack_t * Packet){
	return Packet->Data.Value[1];
}

/*220-msg_GeefReservering*/
SCP_Data_t SCP_msg_GeefReservering(UID_t UID, int32_t ResvNr){
	SCP_Data_t Packet;
	Packet.Message_type = msg_GeefReservering;
	memmove(Packet.UID,UID.UID,7);
	Packet.Value[0] = 0;
	Packet.Value[1] = ResvNr;
	Packet.Text = NULL;
	return Packet;
}

/* 221-msg_Reservering*/
struct tm SCP_msg_Reservering__StartTime(SCP_pack_t * Packet){
	struct tm StartTime;

	StartTime.tm_sec =  0x00;
	StartTime.tm_min =  SCP_hex_to_dec(Packet->Data.UID[0]);
	StartTime.tm_hour = SCP_hex_to_dec(Packet->Data.UID[1]);
	StartTime.tm_mday = Packet->Data.Value[0];
	StartTime.tm_year = SCP_hex_to_dec(Packet->Data.UID[2]) + 100;
	StartTime.tm_mon = 0;
	StartTime.tm_isdst = -1;

	if(mktime(&StartTime)==-1) {
		printf("I cannot represent the calendar time :-(\n");
	}

	return StartTime;
}


struct tm SCP_msg_Reservering__EndTime(SCP_pack_t * Packet){
	struct tm EndTime;

	EndTime.tm_sec =  0x00;
	EndTime.tm_min =  SCP_hex_to_dec(Packet->Data.UID[3]);
	EndTime.tm_hour = SCP_hex_to_dec(Packet->Data.UID[4]);
	EndTime.tm_mday = Packet->Data.Value[1];
	EndTime.tm_year = SCP_hex_to_dec(Packet->Data.UID[5]) + 100;
	EndTime.tm_mon = 0;
	EndTime.tm_isdst = -1;

	if(mktime(&EndTime) == -1) {
		printf("I cannot represent the calendar time :-(\n");
	}

	return EndTime;
}
/* 222-msg_Reserveringprice*/
SCP_Data_t SCP_msg_ReserveringPrice(int32_t ResvNr){
	SCP_Data_t Packet;
	Packet.Message_type = msg_ReserveringPrice;
	memset(Packet.UID,0,7);
	Packet.Value[0] = 0;
	Packet.Value[1] = ResvNr;
	Packet.Text = NULL;
	return Packet;
}

int32_t SCP_msg_ReserveringPrice__price(SCP_pack_t * Packet){
	return Packet->Data.Value[1];
}

/* 223-msg_ReserveringBetaald */
SCP_Data_t SCP_msg_ReserveringBetaald(int32_t ResvNr, int32_t Centen){
	SCP_Data_t Packet;
	Packet.Message_type = msg_ReserveringBetaald;
	memset(Packet.UID,0,7);
	Packet.Value[0] = Centen;
	Packet.Value[1] = ResvNr;
	Packet.Text = NULL;
	return Packet;
}

/*224-msg_ReserveringStarted*/
SCP_Data_t SCP_msg_ReserveringStarted(uint16_t machine ,int32_t ResvNr){
	SCP_Data_t Packet;
	Packet.Message_type = msg_ReserveringStarted;
	memset(Packet.UID,0,7);
	Packet.Value[0] = machine;
	Packet.Value[1] = ResvNr;
	Packet.Text = NULL;
	return Packet;
}

/*225-msg_ReserveringBooked*/
SCP_Data_t SCP_msg_ReserveringBooked(UID_t UID, uint16_t min, uint8_t machine_type){
	SCP_Data_t Packet;
	if(UID.type == RFID_UID){
		Packet.Message_type = msg_RFID_ReserveringBooked;
	}else if(UID.type == QR_UID){
		Packet.Message_type = msg_QR_ReserveringBooked;
	}else if(UID.type == NONE_UID){
		Packet.Message_type = msg_ReserveringBooked;
	}else{
		Packet = SCP_msg_Error();
		return Packet;
	}
	memmove(Packet.UID,UID.UID,7);
	Packet.Value[0] = min;
	Packet.Value[1] = machine_type;
	Packet.Text = NULL;
	return Packet;
}

int32_t SCP_msg_ReserveringBooked__ResvNr(SCP_pack_t * Packet){
	return Packet->Data.Value[1];
}

/* 228-msg_ReserveringMachine*/
SCP_Data_t SCP_msg_ReserveringMachine(uint8_t Machine){
	SCP_Data_t Packet;
	Packet.Message_type = msg_ReserveringMachine;
	memset(Packet.UID,0,7);
	Packet.Value[0] = Machine;
	Packet.Value[1] = 0;
	Packet.Text = NULL;
	return Packet;
}

int32_t SCP_msg_ReserveringMachine__ResvNr(SCP_pack_t * Packet){
	return Packet->Data.Value[1];
}

/* 229-msg_ReserveringChanged*/
int32_t SCP_msg_ReserveringChanged__Machine(SCP_pack_t * Packet){
	return Packet->Data.Value[0];
}

int32_t SCP_msg_ReserveringChanged__ResvNr(SCP_pack_t * Packet){
	return Packet->Data.Value[1];
}


/* 230-msg_ReserveringInfo*/
SCP_Data_t SCP_msg_ReserveringGetInfo(int32_t ResvNr, char * var_name){
	SCP_Data_t Packet;
	Packet.Message_type = msg_ReserveringGetInfo;
	memset(Packet.UID,0,7);
	Packet.Value[0] = 0;
	Packet.Value[1] = ResvNr;
	Packet.Text = cmem_malloc(strlen(var_name)+1);
	memmove(Packet.Text,var_name,strlen(var_name)+1);
	return Packet;
}

/* 231-msg_ReserveringInfo*/
SCP_Data_t SCP_msg_ReserveringSetInfo(int32_t ResvNr, char * var_name){
	SCP_Data_t Packet;
	Packet.Message_type = msg_ReserveringSetInfo;
	memset(Packet.UID,0,7);
	Packet.Value[0] = 0;
	Packet.Value[1] = ResvNr;
	Packet.Text = cmem_malloc(strlen(var_name)+1);
	memmove(Packet.Text,var_name,strlen(var_name)+1);
	return Packet;
}

char * SCP_msg_ReserveringSetInfo__var(SCP_pack_t * Packet){
	return Packet->Data.Text;
}

/* 301-msg_LinkInfo*/
SCP_Data_t SCP_msg_LinkInfo(int32_t ResvNr){
	SCP_Data_t Packet;
	Packet.Message_type = msg_LinkInfo;
	memset(Packet.UID,0,7);
	Packet.Value[0] = 0;
	Packet.Value[1] = ResvNr;
	Packet.Text = NULL;
	return Packet;
}

/* 302-msg_LinkInfoOk*/
char * SCP_msg_LinkInfoOk__Color(SCP_pack_t * Packet, char * Color){
	strncpy(Color,(char *)Packet->Data.UID,7);
	return Color;
}

int32_t SCP_msg_LinkInfoOk__ToLink(SCP_pack_t * Packet){
	return Packet->Data.Value[0];
}

int32_t SCP_msg_LinkInfoOk__Linked(SCP_pack_t * Packet){
	return Packet->Data.Value[1];
}

/* 303-msg_RFIDLink*/
SCP_Data_t SCP_msg_RFIDLink(UID_t UID,int32_t ResvNr){
	SCP_Data_t Packet;
	Packet.Message_type = msg_RFIDLink;
	memmove(Packet.UID,UID.UID,7);
	Packet.Value[0] = 0;
	Packet.Value[1] = ResvNr;
	Packet.Text = NULL;
	return Packet;
}

/* 304-msg_RFIDLinkOk*/
int32_t SCP_msg_RFIDLinkOk__ToLink(SCP_pack_t * Packet){
	return Packet->Data.Value[0];
}

int32_t SCP_msg_RFIDLinkOk__Linked(SCP_pack_t * Packet){
	return Packet->Data.Value[1];
}

/* 305-msg_RFIDUnlink*/
SCP_Data_t SCP_msg_RFIDUnlink(UID_t UID){
	SCP_Data_t Packet;
	Packet.Message_type = msg_RFIDUnlink;
	memmove(Packet.UID,UID.UID,7);
	Packet.Value[0] = 0;
	Packet.Value[1] = 0;
	Packet.Text = NULL;
	return Packet;
}

SCP_Data_t SCP_msg_RFIDUnlinkAll(int32_t ResvNr){
	SCP_Data_t Packet;
	Packet.Message_type = msg_RFIDUnlink;
	memset(Packet.UID,0,7);
	Packet.Value[0] = 0;
	Packet.Value[1] = ResvNr;
	Packet.Text = NULL;
	return Packet;
}

/* 306-msg_RFIDUnlinkOk*/
char * SCP_msg_RFIDUnlinkOk__Color(SCP_pack_t * Packet, char * Color){
	strncpy(Color,(char *)Packet->Data.UID,7);
	return Color;
}

int32_t SCP_msg_RFIDUnlinkOk__ResvNr(SCP_pack_t * Packet){
	return Packet->Data.Value[0];
}

int32_t SCP_msg_RFIDUnlinkOk__Linked(SCP_pack_t * Packet){
	return Packet->Data.Value[1];
}

/*321-msg_Machine_started*/
SCP_Data_t SCP_msg_Machine_started(uint16_t machine, uint8_t machine_type){
	SCP_Data_t Packet;
	Packet.Message_type = msg_Machine_started;
	memset(Packet.UID,0,7);
	Packet.Value[0] = machine;
	Packet.Value[1] = machine_type;
	Packet.Text = NULL;
	return Packet;
}


/*322-msg_Machine_stoped*/
SCP_Data_t SCP_msg_Machine_stoped(uint16_t machine){
	SCP_Data_t Packet;
	Packet.Message_type = msg_Machine_stoped;
	memset(Packet.UID,0,7);
	Packet.Value[0] = machine;
	Packet.Value[1] = 0;
	Packet.Text = NULL;
	return Packet;
}

/*323-msg_Machine_available*/
SCP_Data_t SCP_msg_Machine_available(uint8_t machine_type){
	SCP_Data_t Packet;
	Packet.Message_type = msg_Machine_available;
	memset(Packet.UID,0,7);
	Packet.Value[0] = 0;
	Packet.Value[1] = machine_type;
	Packet.Text = NULL;
	return Packet;
}

int32_t SCP_msg_Machine_available__ResvPending(SCP_pack_t * Packet){
	return Packet->Data.UID[0];
}

int32_t SCP_msg_Machine_available__min(SCP_pack_t * Packet){
	return Packet->Data.Value[0];
}

int32_t SCP_msg_Machine_available__Akkoord(SCP_pack_t * Packet){
	return Packet->Data.Value[1];
}

/*324-msg_Machine_present*/
SCP_Data_t SCP_msg_Machine_present(uint8_t machine_type, uint8_t subtype, uint8_t machine_present, uint16_t price, uint16_t tick_min){
	SCP_Data_t Packet;
	Packet.Message_type = msg_Machine_present;
	Packet.UID[0] = machine_type;
	Packet.UID[1] = subtype;
	Packet.UID[2] = machine_present;
	Packet.UID[3] = 0;
	Packet.UID[4] = 0;
	Packet.UID[5] = 0;
	Packet.UID[6] = 0;
	Packet.Value[0] = price;
	Packet.Value[1] = tick_min;
	Packet.Text = NULL;
	return Packet;
}


/*331-msg_PoortOpen*/
SCP_Data_t SCP_msg_PoortOpen(UID_t UID, uint16_t poort){
	SCP_Data_t Packet;
	if(UID.type == RFID_UID){
		Packet.Message_type = msg_RFID_PoortOpen;
	}else if(UID.type == QR_UID){
		Packet.Message_type = msg_QR_PoortOpen;
	}else{
		Packet = SCP_msg_Error();
		return Packet;
	}
	memmove(Packet.UID,UID.UID,7);
	Packet.Value[0] = 0;
	Packet.Value[1] = poort;
	Packet.Text = NULL;
	return Packet;
}

/*500-msg_Newprice*/
int32_t SCP_msg_Newprice__Centen(SCP_pack_t * Packet){
	return Packet->Data.Value[0];
}

int32_t SCP_msg_Newprice__Machine(SCP_pack_t * Packet){
	return Packet->Data.Value[1];
}

/*501-msg_Mode*/

/* 600-msg_Alert*/
SCP_Data_t SCP_msg_Alert(uint16_t Alert,uint16_t Specify){
	SCP_Data_t Packet;
	Packet.Message_type = msg_Alert;
	memset(Packet.UID,0,7);
	Packet.Value[0] = Alert;
	Packet.Value[1] = Specify;
	Packet.Text = NULL;
	return Packet;
}

/* 601-msg_Printer_status*/
SCP_Data_t SCP_msg_Printer_status(uint16_t Printer_state, uint16_t printer){
	SCP_Data_t Packet;
	Packet.Message_type = msg_Printer_status;
	memset(Packet.UID,0,7);
	Packet.Value[0] = Printer_state;
	Packet.Value[1] = printer;
	Packet.Text = NULL;
	return Packet;
}

/* 602-msg_Transaction_done*/
SCP_Data_t SCP_msg_Transaction_done(int16_t multipass_payed, int16_t cash_payed, int16_t bank_payed){
	SCP_Data_t Packet;
	Packet.Message_type = msg_Transaction_done;
	memset(Packet.UID,0,7);
	Packet.UID[0] = (multipass_payed/100);
	Packet.UID[1] = (multipass_payed%100);
	Packet.Value[0] = cash_payed;
	Packet.Value[1] = bank_payed;
	Packet.Text = NULL;
	return Packet;
}

/* 604-msg_Poort_status*/
SCP_Data_t SCP_msg_Poort_status(gate_action_t action,uint8_t status, int16_t poort){
	SCP_Data_t Packet;
	Packet.Message_type = msg_Poort_status;
	memset(Packet.UID,0,7);
	Packet.UID[0] = action;
	Packet.UID[1] = status;
	Packet.Value[0] = 0;
	Packet.Value[1] = poort;
	Packet.Text = NULL;
	return Packet;
}

/*900-msg_var_int_send*/
SCP_Data_t SCP_msg_var_int_send(char * var_name,int32_t var_val){
	SCP_Data_t Packet;
	uint8_t i;
	Packet.Message_type = msg_var_int_send;
	for(i=0;i<4;i++){
		Packet.UID[i] = (var_val & 0xFF);
		var_val = (var_val >> 8);
	}
	Packet.Value[0] = 0;
	Packet.Value[1] = 0;
	Packet.Text = cmem_malloc(strlen(var_name)+1);
	memmove(Packet.Text,var_name,strlen(var_name)+1);
	return Packet;
}

char * SCP_msg_var_int__varname(SCP_pack_t * Packet){
	return Packet->Data.Text;
}

int32_t SCP_msg_var_int_send__value(SCP_pack_t * Packet){
	int32_t value = 0;
	uint8_t i;
	for(i=0;i<4;i++){
		value |= (Packet->Data.UID[i] << (8*i));
	}
	return value;
}

/*901-msg_var_int_request*/
SCP_Data_t SCP_msg_var_int_request(char * var_name){
	SCP_Data_t Packet;
	Packet.Message_type = msg_var_int_request;
	memset(Packet.UID,0,7);
	Packet.Value[0] = 0;
	Packet.Value[1] = 0;
	Packet.Text = cmem_malloc(strlen(var_name)+1);
	memmove(Packet.Text,var_name,strlen(var_name)+1);
	return Packet;
}

