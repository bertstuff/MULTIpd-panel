/**
 * \addtogroup device
 * @{
 */

/**
 * \defgroup RFID_API
 *
 * The RFID API defines a set of functions for reading and writing the RFID card.
 *
 * @{
 */

/**
 * \file
 * This file contains functions and processes for accessing the RFID card
 * \author
 *         Mark van der Heijden <m.vanderheijden@custommate.eu>
 * 
 */
  #ifndef _RFID_MicroRWD_
  #define _RFID_MicroRWD_ 
  
  #include <string.h>
  #include <stdlib.h> 
  #include <stdint.h> 
  #include <stdbool.h>
  #include <time.h>
  #include <Core/Thread/pt.h>
  #include <Core/Process/process.h>
  #include <Processes/Global_UID.h>
  #include <Core/Type/type.h>
  
  #define RFID_MAX_SPEED_HZ 400000
  
 typedef enum{
	MIFARE_1k,
	MIFARE_4k,
	MIFARE_UL,
	MIFARE_NUL,
	HIGTAG_2,
	HIGTAG_1S,
	EM400XMC200
 } RFID_card_type;
 
 typedef enum{
    RFID_NO_ERROR,
    RFID_I2C_ERROR,
    RFID_RS232_ERROR,
    RFID_PASS_FAIL,
    RFID_VERIFY_FAILED
 }RFID_error_t;
 
 typedef struct{
	 uint8_t auth_lev;
	 Language_t Language;
	 uint8_t last_mod_nr;
	 bool Unlock_code_ok;
	 struct tm Start_date;
	 struct tm End_date;
	 bool Date_ok;
	 uint8_t card_version;
 } RFID_card_info_t;


 typedef struct{
	 bool Info_read;
	 bool Info_write;
	 bool Unlock_code_read;
	 bool Unlock_code_write;
 } RFID_card_read_write_t;

  typedef struct {
	int status_flag;
	bool card_present;
	bool card_old_present;
	RFID_card_type card_type;
	UID_t card_UID;
	UID_t card_old_UID;
	RFID_card_info_t info;
	RFID_card_read_write_t action;
	uint8_t adres;
	bool beep_sound;
	char output_state;
	bool write_ok;
	bool read_ok;
  } RFID_card_t;
  
  typedef enum {
	 KeyA = 0,
	 KeyB = 1
  } Key_t;
  ////////////////////Global variabels/////////////////
  //extern RFID_card_t current_card;
  extern struct pt pt_RFID_send_data;
  extern process_event_t event_card_change;
  extern process_event_t event_card_busy;
  extern process_event_t event_card_done;

  #define event_card_present event_card_change && ((*(RFID_card_t * )data).card_present == true)
  #define event_card_remove event_card_change && ((*(RFID_card_t * )data).card_present == false)
  #define RFID_get_data(DATA)	((RFID_card_t *)data)

  PROCESS_NAME(RFID_process);
  ///////////////////API Functions///////////////////
  

  /*
   * @brief start polling rfid reader
   * @param RFID_addr i2c address of RFID reader
   */
  RFID_card_t * RFID_init(uint8_t RFID_addr);

  /**
  *@brief Write data to the RFID card. poll till return value is true .use RFID_get_error to check for errors.
  *@param Block_address MF Card Block Address 0 – 255
  *@param Key_type security key type type A or B(not fully implemented yet use KeyA )
  *@param Key_code_number security code(not fully implemented yet use 0)
  *@param Data Data to write to card. 16 byte
  *@return Done (true = finished false = busy)
  **/
  PT_THREAD(RFID_Write_Data(RFID_card_t * reader, int Block_address ,Key_t Key_type ,int Key_code_number,char * data));
  // void RFID_Write_Data(int Block_address, Key_t Key_type, int Key_code_number, char Data[16]);
  
  /**
  *@brief Read data from the RFID card. poll till return value is true .use RFID_get_error to check for errors.
  *@param Block_address MF Card Block Address 0 – 255
  *@param Key_type security key type type A or B(not fully implemented yet use KeyA )
  *@param Key_code_number security code(not fully implemented yet use 0)
  *@param Data Pointer to received data. 16 byte
  *@return Done (true = finished false = busy)
  **/
  //void RFID_Read_Data(int Block_address ,Key_t Key_type ,int Key_code_number);
  PT_THREAD(RFID_Read_Data(RFID_card_t * reader, int Block_address ,Key_t Key_type ,int Key_code_number,char * data));
  
  /**
  *@brief Get error of the last read or write action
  *@return error
  **/
  RFID_error_t RFID_get_error(void);
  
  /**
  *@brief Get the current card 
  *@return card
  **/
  RFID_card_t RFID_get_current_card(void);

  RFID_card_t * RFID_get_current_reader(void);

  bool RFID_card_present(RFID_card_t * reader);
  /**
   * @beep sound
   */
  void RFID_beep_sound(void);

  void RFID_set_card_type(RFID_card_type cardtype);

  void RFID_read_card(void);

#endif //_RFID_MicroRWD_
  /**
 * 	@}
 * @}
 **/
