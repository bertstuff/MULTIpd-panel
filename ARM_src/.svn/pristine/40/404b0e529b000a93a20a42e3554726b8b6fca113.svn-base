#include "Debug_Terminal.h"
#include <Board/Def_config.h>
#include <Driver/include/lpc17xx_nvic.h>
#include <Processes/dev_reset.h>

#if (BOARD_SD_CARD == 1)
	#include <Core/protocol/FAT/diskio.h>
	#include <Core/protocol/FAT/ff.h>
#endif
#include <stdio.h>
#include <stdlib.h>

void printstackpointer(char * text){
	uint8_t printstackpointer;
	void * ptr = malloc(64);
	uint32_t rest= (uint32_t)&printstackpointer - (uint32_t)ptr;
	printf("stack:(%x)(%x) %d %s\r\n",&printstackpointer,ptr,rest,text);
	free(ptr);
	return;
}

// with stack frame location as input parameter
// called from HardFault_Handler
void hard_fault_handler_c (unsigned int * hardfault_args)
{
  unsigned int stacked_r0;
  unsigned int stacked_r1;
  unsigned int stacked_r2;
  unsigned int stacked_r3;
  unsigned int stacked_r12;
  unsigned int stacked_lr;
  unsigned int stacked_pc;
  unsigned int stacked_psr;
 
  stacked_r0 = ((unsigned long) hardfault_args[0]);
  stacked_r1 = ((unsigned long) hardfault_args[1]);
  stacked_r2 = ((unsigned long) hardfault_args[2]);
  stacked_r3 = ((unsigned long) hardfault_args[3]);
 
  stacked_r12 = ((unsigned long) hardfault_args[4]);
  stacked_lr = ((unsigned long) hardfault_args[5]);
  stacked_pc = ((unsigned long) hardfault_args[6]);
  stacked_psr = ((unsigned long) hardfault_args[7]);
  
  //print to terminal
  printf ("\n\n[Hard fault handler - all numbers in hex]\n");
  printf ("R0 = %x\n", stacked_r0);
  printf ("R1 = %x\n", stacked_r1);
  printf ("R2 = %x\n", stacked_r2);
  printf ("R3 = %x\n", stacked_r3);
  printf ("R12 = %x\n", stacked_r12);
  printf ("LR [R14] = %x  subroutine call return address\n", stacked_lr);
  printf ("PC [R15] = %x  program counter\n", stacked_pc);
  printf ("PSR = %x\n", stacked_psr);
  // Bus Fault Address Register
  printf ("BFAR = %x\n", (*((volatile unsigned long *)(0xE000ED38))));
  // Configurable Fault Status Register
  // Consists of MMSR, BFSR and UFSR
  printf ("CFSR = %x\n", (*((volatile unsigned long *)(0xE000ED28))));
  // Hard Fault Status Register
  printf ("HFSR = %x\n", (*((volatile unsigned long *)(0xE000ED2C))));
  // Debug Fault Status Register
  printf ("DFSR = %x\n", (*((volatile unsigned long *)(0xE000ED30))));
  // Auxiliary Fault Status Register
  printf ("AFSR = %x\n", (*((volatile unsigned long *)(0xE000ED3C))));
  printf ("SCB_SHCSR = %x\n", SCB->SHCSR);
  printstackpointer("HardFault");

#if (BOARD_SD_CARD == 1)
  //print to file
  FIL file;
  FRESULT rc;
  FATFS Fatfs;
  
  rc = 	f_mount(&Fatfs,"SD1:",1);
  if(rc == FR_OK){
    if(f_open(&file,"HardF.log",FA_OPEN_ALWAYS | FA_WRITE) == FR_OK){
      f_printf (&file,"\n\n[Hard fault handler - all numbers in hex]\n");
      f_printf (&file,"R0 = %x\n", stacked_r0);
      f_printf (&file,"R1 = %x\n", stacked_r1);
      f_printf (&file,"R2 = %x\n", stacked_r2);
      f_printf (&file,"R3 = %x\n", stacked_r3);
      f_printf (&file,"R12 = %x\n", stacked_r12);
      f_printf (&file,"LR [R14] = %x  subroutine call return address\n", stacked_lr);
      f_printf (&file,"PC [R15] = %x  program counter\n", stacked_pc);
      f_printf (&file,"PSR = %x\n", stacked_psr);
      f_printf (&file,"BFAR = %x\n", (*((volatile unsigned long *)(0xE000ED38))));
      f_printf (&file,"CFSR = %x\n", (*((volatile unsigned long *)(0xE000ED28))));
      f_printf (&file,"HFSR = %x\n", (*((volatile unsigned long *)(0xE000ED2C))));
      f_printf (&file,"DFSR = %x\n", (*((volatile unsigned long *)(0xE000ED30))));
      f_printf (&file,"AFSR = %x\n", (*((volatile unsigned long *)(0xE000ED3C))));
      f_printf (&file,"SCB_SHCSR = %x\n", SCB->SHCSR);      
      rc = f_close(&file);
    }
  }
#endif
  Hard_reset();
  while(1);
}

void HardFault_Handler(void)
{
   __asm volatile
  ( 
     "TST LR, #4                                                  \n"
     "ITE EQ                                                      \n"
     "MRSEQ R0, MSP                                               \n"
     "MRSNE R0, PSP                                               \n"
     "B hard_fault_handler_c                                      \n"
  );
  return;
}
