#include <Core/Clock/clock.h>
#include <Core/Debug/Error_check.h>
#include <Core/Peripherals/I2C_Dev_Init.h>
#include <Core/Timer/etimer.h>
#include <Device/I2C/RFID/RFID.h>
#include <Device/I2C/RFID/RFID_Pass.h>
#include <Device/I2C/SC16IS740/SC16IS740.h>
#include <Driver/include/lpc_types.h>
#include <screen/SCR_Init.h>
#include <Processes/dev_reset.h>
#include <stdio.h>

#undef DEBUG
#define DEBUG 0

#ifndef I2C_SPEED_HZ
  #define I2C_SPEED_HZ 400
#endif

#define RFID_ProgEprom 0x50	//0x50 (P) Programmeer Eprom register in RWD.
#define RFID_KeyStore 0x4B	//0x4B (K) Sla sleutel opslaan in RWD
#define RFID_WriteData 0x57	//0x57 (W) Write Data op kaart
#define RFID_ReadData 0x52	//0x52 (R) Read Data op kaart
#define RFID_IncValue 0x49	//0x49 (I) Increment data op kaart
#define RFID_Transfer 0x54	//0x54 (T) Transfer Data (copy)
#define RFID_Status 0x53	//0x53 (S) Status alleen opvragen
#define RFID_GET_UID 0x55		//0x55 (U) Unique IDentifier nummer opvragen
#define RFID_TypeID 0x78	//0x78 (x) Kaart Type ID nummer
#define RFID_OutPut 0x4F	//0x4F (O) Output control byte.
#define RFID_ReadRXData 0x10	//0x10 lees data uit van kaart
#define RFID_ReadTagBlock 0x72 //
#define RFID_WriteTagBlock 0x77 //
#define RFID_ReaderType 0x76	//0x76 (v) set reader type

#define card_type_mask 0x30
#define card_status_mask 0x8d
#define card_com_mask 0x88
#define Mifare_com_mask 0x88
#define Higtag_com_mask 0xC8

//Error bits
#define No_error_card 0x80
#define Mifare_error_card 0x80
#define Higtag_error_card 0xC0
#define EEPROM_error 1<<0
#define Card_OK 1<<1
#define Rx_OK 1<<2
#define RS232_error 1<<3
#define MF_type 1<<4
#define UL_type 1<<5
#define MFRC_error 1<<6
#define HTRC_error 1<<5

process_event_t event_card_change;
process_event_t event_card_done;
process_event_t event_card_busy;

struct pt pt_RFID_send;
struct pt pt_RFID_send_data;

RFID_card_t current_card[2];
uint8_t RFID_readers = 0;
bool read_card;


#define	F_RED_LED 	(1 << 0)
#define F_GREEN_LED (1 << 1)
#define F_BUZZER 	(1 << 2)
#define is_Hitag(PASS_TYPE)	(PASS_TYPE >= HIGTAG_2)
#define is_Mifaire(PASS_TYPE) (PASS_TYPE < HIGTAG_2)

RFID_card_type RFID_selected_card_type = MIFARE_1k;
RFID_error_t RFID_error = RFID_I2C_ERROR;

bool RFID_card_present(RFID_card_t * reader);
void RFID_get_unique_ID(RFID_card_t * reader);
bool RFID_receive_flag(RFID_card_t * reader);
void RFID_failed_I2C(int I2C_status);
void RFID_failed(int Status_flag);
RFID_card_type RFID_get_card_type(int Status_flag);
PT_THREAD(RFID_send_command(RFID_card_t * reader, char command, char * Tx_data, unsigned int Tx_length));
char Higtag_type_byte(RFID_card_type cardtype);
bool RFID_data_availible(RFID_card_t * reader);

PROCESS(RFID_process, "Process for RFID card reader");

///////////init//////////////////////
RFID_card_t * RFID_init(uint8_t RFID_addr)
{
  Status I2C_status; 
  Ser_UART_Config_t Config;
  if(RFID_readers == 0){
	  I2C_Dev_Init(RFID_MAX_SPEED_HZ);
	  event_card_busy = process_alloc_event(); //Claim a event number
	  event_card_change = process_alloc_event(); //Claim a event number
	  event_card_done = process_alloc_event(); //Claim a event number
	  error_check_add(TYPE_ENUM, &RFID_error, ERROR_RFID);
  }
  current_card[RFID_readers].info.Language = NL;
  current_card[RFID_readers].adres = RFID_addr;
  current_card[RFID_readers].beep_sound = false;
  current_card[RFID_readers].card_old_UID.UID[6] = 0xFF;
  current_card[RFID_readers].card_present = false;
  current_card[RFID_readers].card_type = RFID_selected_card_type;
  current_card[RFID_readers].status_flag = 0;

  //Actions
  current_card[RFID_readers].action.Info_read = true;
  current_card[RFID_readers].action.Info_write = false;
  current_card[RFID_readers].action.Unlock_code_read = false;
  current_card[RFID_readers].action.Unlock_code_write = false;

  Config.Baudrate = 9600;
  Config.NumBits = 8;
  Config.StopBit = 1;
  Config.Parity = PAR_None;
  Config.AutoCTS = true;
  Config.AutoRTS = false;
  Config.RTSActive = false; 

  I2C_status = SerInitUART(RFID_addr, Config);

  if(I2C_status != SUCCESS)
  {
          RFID_failed_I2C(I2C_status);
  }

  process_start(&RFID_process,NULL);
  RFID_readers++;
  return &current_card[RFID_readers -1];
}

void RFID_set_card_type(RFID_card_type cardtype){
	RFID_selected_card_type = cardtype;
}

void RFID_read_card(void){
	read_card = true;
}

 ///////////RFID main thread/////////
PROCESS_THREAD(RFID_process, ev, data)
{
   static struct etimer poll_timer;
   static struct etimer RFID_fb_beep_t;
   static bool card_type_ok = true;
   static char data_byte[2];
   static uint8_t reader;

   if(etimer_expired(&poll_timer)) {
     etimer_set(&poll_timer, CLOCK_SECOND/10);
   }

   PROCESS_BEGIN();
   PROCESS_YIELD();
   for(reader= 0; reader < RFID_readers; reader++){
	   if(is_Mifaire(current_card[reader].card_type)){
		   current_card[reader].output_state = ~(F_RED_LED|F_GREEN_LED);
	   	   PROCESS_PT_SPAWN( &pt_RFID_send, RFID_send_command(&current_card[reader],RFID_OutPut, &current_card[reader].output_state, 1));
	   }else{
		   data_byte[0] = 0x03; //Encryption off
		   data_byte[1] = 0x00;
		   PROCESS_PT_SPAWN( &pt_RFID_send, RFID_send_command(&current_card[reader], RFID_ProgEprom,data_byte, 2));
		   data_byte[0] = Higtag_type_byte(current_card[reader].card_type);
		   PROCESS_PT_SPAWN( &pt_RFID_send, RFID_send_command(&current_card[reader], RFID_ReaderType,data_byte, 1));
	   }
   }
   reader = 0;
   while (ev != PROCESS_EVENT_EXIT){ //main loop  till exit
	    //get uid from pass
	   reader++;
	   if(reader >= RFID_readers){
		   reader = 0;
	   }
	   RFID_error = RFID_NO_ERROR;
	   if(is_Mifaire(current_card[reader].card_type)){
	    	PROCESS_PT_SPAWN( &pt_RFID_send, RFID_send_command(&current_card[reader], RFID_GET_UID, NULL, 0));
	    }else{
	    	data_byte[0] = 0;
	    	PROCESS_PT_SPAWN( &pt_RFID_send, RFID_send_command(&current_card[reader], RFID_ReadData, data_byte, 1));
	    }

		RFID_get_unique_ID(&current_card[reader]);
		if((current_card[reader].card_present != current_card[reader].card_old_present)||(memcmp(current_card[reader].card_UID.UID, current_card[reader].card_old_UID.UID, 7) != 0)||(read_card == true)) //card changed
		{
			read_card = false;
		 	if(current_card[reader].card_present == true){
		 		process_post(PROCESS_BROADCAST,event_card_busy,&current_card[reader]);
		 		if(is_Mifaire(current_card[reader].card_type)){
		 			current_card[reader].output_state = ~(F_RED_LED|F_GREEN_LED);
		 			PROCESS_PT_SPAWN( &pt_RFID_send, RFID_send_command(&current_card[reader], RFID_OutPut, &current_card[reader].output_state, 1));
		 		}

				//Read actions
		 		current_card[reader].read_ok = true;
		 		if((current_card[reader].action.Info_read) && (current_card[reader].read_ok == true) && (!current_card[reader].action.Info_write)){
		 			PROCESS_PT_SPAWN(&RFID_pass_pt, RFID_Get_Info(&current_card[reader], &current_card[reader].read_ok));
		 		}


		 		if((current_card[reader].action.Unlock_code_read) && (current_card[reader].read_ok == true) && (!current_card[reader].action.Unlock_code_write)){
					PROCESS_PT_SPAWN(&RFID_pass_pt, RFID_Check_Unlock_Code(&current_card[reader], &current_card[reader].read_ok));
					if(current_card[reader].info.Unlock_code_ok == false){
						current_card[reader].info.auth_lev = 0;
					}
				}

		 	 }else{
		 	   current_card[reader].action.Info_write = false;
		 	   current_card[reader].action.Unlock_code_write = false;
		 	   current_card[reader].info.Unlock_code_ok = false;
		 	   current_card[reader].info.Date_ok = false;
			   printf("RFID %d: Pass removed \r\n",reader);
			 }

		 	 PROCESS_WAIT_UNTIL(SCR_is_busy() == false);
		 	 process_post(PROCESS_BROADCAST,event_card_change,&current_card[reader]);
		 	 PROCESS_WAIT_UNTIL(process_event_in_list(event_card_change)==false);

		 	if(current_card[reader].card_present == true)
		    {
				//Debug info
				 printf("RFID %d: Pass present [UID: %02x ",reader,current_card[reader].card_UID.UID[0]);
				 printf("%02x ",current_card[reader].card_UID.UID[1]);
				 printf("%02x ",current_card[reader].card_UID.UID[2]);
				 printf("%02x ",current_card[reader].card_UID.UID[3]);
				 printf("%02x ",current_card[reader].card_UID.UID[4]);
				 printf("%02x ",current_card[reader].card_UID.UID[5]);
				 printf("%02x] \r\n",current_card[reader].card_UID.UID[6]);

				 //check card type
				 card_type_ok = ((current_card[reader].card_type == MIFARE_1k)||(current_card[reader].card_type == MIFARE_4k)) ? true:false;
				 current_card[reader].beep_sound = true;
		   }
		   else //no card present
		   {
			   if(is_Mifaire(current_card[reader].card_type)){
				   current_card[reader].output_state = ~(F_RED_LED);
				   PROCESS_PT_SPAWN( &pt_RFID_send, RFID_send_command(&current_card[reader], RFID_OutPut, &current_card[reader].output_state, 1));
			   }
		   }
		}

		//write actions
		current_card[reader].write_ok = true;
		if((current_card[reader].action.Info_write == true) && (current_card[reader].card_present == true) && (current_card[reader].write_ok == true)){
			PROCESS_PT_SPAWN(&RFID_pass_pt, RFID_Set_Info(&current_card[reader], &current_card[reader].write_ok));
			if((current_card[reader].write_ok == false)||(current_card[reader].action.Unlock_code_write == false)||(current_card[reader].card_present == false) )
			process_post(PROCESS_BROADCAST,event_card_done,&current_card[reader]);
		}

		if((current_card[reader].action.Unlock_code_write == true) && (current_card[reader].card_present == true) && (current_card[reader].write_ok == true)){
			PROCESS_PT_SPAWN(&RFID_pass_pt, RFID_Write_Unlock_Code(&current_card[reader], &current_card[reader].write_ok));
			process_post(PROCESS_BROADCAST,event_card_done,&current_card[reader]);
		}

		PROCESS_WAIT_UNTIL(process_event_in_list(event_card_done)==false);


	    //skip led and buzzer functions with a higtag reader
		if(is_Hitag(current_card[reader].card_type)){
			 current_card[reader].card_old_UID = current_card[reader].card_UID;
			 current_card[reader].card_old_present = current_card[reader].card_present;
			 continue;
		}

		//led
		if((current_card[reader].card_present != current_card[reader].card_old_present)||(memcmp(current_card[reader].card_UID.UID, current_card[reader].card_old_UID.UID, 7) != 0)){ //card changed
			 if(current_card[reader].card_present == true){
				 current_card[reader].output_state = ~((card_type_ok?F_GREEN_LED:0));
			 }else{
				 current_card[reader].output_state = ~(F_RED_LED);
			 }
			 PROCESS_PT_SPAWN( &pt_RFID_send, RFID_send_command(&current_card[reader], RFID_OutPut, &current_card[reader].output_state, 1));
		}

		//beep sound lines
		if(current_card[reader].beep_sound == true){
			 //start beep
			 current_card[reader].output_state = ~(~current_card[reader].output_state | F_BUZZER);
			 PROCESS_PT_SPAWN( &pt_RFID_send, RFID_send_command(&current_card[reader], RFID_OutPut, &current_card[reader].output_state, 1));

			 etimer_set(&RFID_fb_beep_t,CLOCK_SECOND/5);//Set beep length
			 PROCESS_WAIT_UNTIL( etimer_expired(&RFID_fb_beep_t));

			 //stop beep
			 current_card[reader].output_state = (current_card[reader].output_state | F_BUZZER);
			 PROCESS_PT_SPAWN( &pt_RFID_send, RFID_send_command(&current_card[reader], RFID_OutPut,  &current_card[reader].output_state, 1));

			 if(current_card[reader].card_present == false){ // disable green led (for QR code reader)
				 etimer_set(&RFID_fb_beep_t,CLOCK_SECOND);//Set beep length
				 PROCESS_WAIT_UNTIL( etimer_expired(&RFID_fb_beep_t));
				 current_card[reader].output_state = ~(F_RED_LED);
				 PROCESS_PT_SPAWN( &pt_RFID_send, RFID_send_command(&current_card[reader], RFID_OutPut, &current_card[reader].output_state, 1));
			 }
			 current_card[reader].beep_sound = false;
		}

		current_card[reader].card_old_UID = current_card[reader].card_UID;
		current_card[reader].card_old_present = current_card[reader].card_present;
   }
   PROCESS_END();
}

PT_THREAD(RFID_Write_Data(RFID_card_t * reader, int Block_address ,Key_t Key_type ,int Key_code_number,char * data))
{
   char RFID_Buffer[18];

   PT_BEGIN(&pt_RFID_send_data) ;
   if(is_Mifaire(reader->card_type)){
	   RFID_Buffer[0] = Block_address;
	   RFID_Buffer[1] = (Key_type << 7) | Key_code_number;
	   memcpy(&RFID_Buffer[2],data,16);
   }else{
	   RFID_Buffer[0] = (Block_address*4);
	   memcpy(&RFID_Buffer[1],data,4);
   }
   PT_SPAWN(&pt_RFID_send_data,&pt_RFID_send, RFID_send_command(reader, RFID_WriteData, RFID_Buffer, (is_Mifaire(reader->card_type))? 18 : 5));

   PT_END(&pt_RFID_send_data);
}

PT_THREAD(RFID_Read_Data(RFID_card_t * reader, int Block_address ,Key_t Key_type ,int Key_code_number,char * data))
{
   Status I2C_status;
   char RFID_Buffer[18];

   PT_BEGIN(&pt_RFID_send_data) ;
   RFID_Buffer[0] = is_Mifaire(reader->card_type)?Block_address : Block_address*4;
   RFID_Buffer[1] = (Key_type << 7) | Key_code_number;
   PT_SPAWN(&pt_RFID_send_data,&pt_RFID_send,RFID_send_command(reader, RFID_ReadData, RFID_Buffer, is_Mifaire(reader->card_type)? 2 : 1));
   I2C_status = SerIn(reader->adres, data, is_Mifaire(reader->card_type)? 16: 4);
   if(I2C_status != SUCCESS){
             RFID_failed_I2C(I2C_status);
   }
   PT_END(&pt_RFID_send_data);
}


RFID_card_t RFID_get_current_card(void){
	uint8_t i;
	for(i = 0; i < RFID_readers; i++){
		if(current_card[i].card_present){
			return current_card[i];
		}
	}
	return current_card[0];
}

RFID_card_t * RFID_get_current_reader(void){
	uint8_t i;
	for(i = 0; i < RFID_readers; i++){
		if(current_card[i].card_present){
			return &current_card[i];
		}
	}
	return &current_card[0];
}

RFID_error_t RFID_get_error(void)
{
  return RFID_error;
}

void RFID_beep_sound(void){
	current_card[0].beep_sound = true;
	return;
}

///////////RFID Sub routines///////////
 
 /**
 *@brief  sub routine thread for sending data to the rfid reader
 **/
 PT_THREAD(RFID_send_command(RFID_card_t * reader, char command, char * Tx_data, unsigned int Tx_length))
 {
	static struct etimer RFID_Response_delay_t;
	static uint8_t timer;
    Status I2C_status;
    
    PT_BEGIN(&pt_RFID_send) ;       
    do{
      I2C_status = SerOut(reader->adres, &command,1);  //commando sturen naar RWD
      if(I2C_status != SUCCESS)
      {
        RFID_failed_I2C(I2C_status);
      }
#if (DEBUG == 1)
      printf("Hitag [%d]: Send %x",clock_time(),command);
#endif
      if(Tx_length > 0)
      {
        I2C_status = SerOut(reader->adres, Tx_data, Tx_length);  //data sturen naar RWD
        if(I2C_status != SUCCESS)
        {
          RFID_failed_I2C(I2C_status);
        }   
      }
#if (DEBUG == 1)
      uint8_t i = 0;
      for(i = 0; i < Tx_length; i++){
    	  printf(" %x",Tx_data[i]);
      }
      printf(" \r\n");
#endif
      timer = 0 ;
      do{
    	  etimer_set(&RFID_Response_delay_t, CLOCK_SECOND / 2);
      	  PT_WAIT_UNTIL(&pt_RFID_send, etimer_expired(&RFID_Response_delay_t));
      	  timer++;
      }while((RFID_data_availible(reader) == false) && (timer<20));
    }while(RFID_receive_flag(reader) == false);
    
    PT_END(&pt_RFID_send);
 }

 bool RFID_data_availible(RFID_card_t * reader){
	  unsigned char statusval;
	  SerReadReg(reader->adres,SerREG_LSR, &statusval);
	  if(statusval != 0x61)
	  {
		  return false;
	  }else{
		  return true;
	  }
 }
 
 /**
 *@brief function to receive satus flag of I2C to UART converter and RFID reader
 **/
 bool RFID_receive_flag(RFID_card_t * reader)
 {
  Status I2C_status;
  char RxBuffer[1];
  
  I2C_status = SerIn(reader->adres, RxBuffer, 1); //read status flag
#if (DEBUG == 1)
  printf("Hitag [%d]:flag %x \r\n",clock_time(),RxBuffer[0]);
#endif
  if(I2C_status != SUCCESS)
  {
    RFID_failed_I2C(I2C_status);
  }
  reader->status_flag = RxBuffer[0];
  if(is_Mifaire(reader->card_type)){
	  if(reader->status_flag & MFRC_error){
		  printf("RFID: Antenna fault \r\n");
	  }

	  if((reader->status_flag & Mifare_com_mask) == Mifare_error_card)
		 return true;
	  else
		 return false;
  }else{
	  if(reader->status_flag & HTRC_error){
		  printf("RFID: Antenna fault \r\n");
	  }

	  if((reader->status_flag & Higtag_com_mask) == Higtag_error_card)
	  	 return true;
	  else
		 return false;
  }
 }
 
/**
*@brief receive UID after sending the recieve UID command
**/
void RFID_get_unique_ID(RFID_card_t * reader)
{
  Status I2C_status;
  char RxBuffer[7];
  uint8_t uid_len = 7;

  if(is_Hitag(reader->card_type)){
	  uid_len = 4;
  }
  
  memset (reader->card_UID.UID, 0, 7); //init on 0
  reader->card_UID.type = RFID_UID;
  if(RFID_card_present(reader) == true)
  {
    I2C_status = SerIn(reader->adres, RxBuffer, uid_len);
#if (DEBUG == 1)
    printf("higtag [%d]: id ",clock_time());
    int8_t i = 0;
    for(i = 0; i < uid_len; i++){
    	printf(" %x",RxBuffer[i]);
    }
    printf("\r\n");
#endif
    if(I2C_status != SUCCESS)
    {
      RFID_failed_I2C(I2C_status);
    }
    memmove(reader->card_UID.UID,RxBuffer,uid_len);
  }

  return;
}
 
/**
*@brief Parse flag to see if pass is presend 
*@param Status_flag status flag to parse
*@return true = pass presend 
**/
bool RFID_card_present(RFID_card_t * reader)
{
  if ((reader->status_flag & card_status_mask) == (No_error_card))
  {//geen errors. geen kaart.
	  reader->card_present = false;
    return false;
  }
  else if ((reader->status_flag & card_status_mask) == ( Rx_OK | No_error_card))
  {//Rx Oke,Kaart Oke, geen errors.
	  reader->card_present = true;
    if(is_Mifaire(reader->card_type)){
       	reader->card_type = RFID_get_card_type(reader->status_flag);
    }
    return true;
  }
  else
  {
	reader->card_present = false;
    RFID_failed(reader->status_flag);
  }
  return false;
} 
/**
*@brief Parse flag to get pass type
*@param Status_flag status flag to parse
*@return pass type
**/
 RFID_card_type RFID_get_card_type(int Status_flag)
 {
	RFID_card_type Cardtype = MIFARE_NUL;
	switch (Status_flag & card_type_mask){
		case 0x00: Cardtype = MIFARE_1k ;break;
		case 0x10: Cardtype = MIFARE_4k ;break;
		case 0x20: Cardtype = MIFARE_UL ;break;
		case 0x30: Cardtype = MIFARE_NUL ;break;
	}
	return Cardtype;
 }
 
 char Higtag_type_byte(RFID_card_type cardtype){
	 switch(cardtype){
	 	 case HIGTAG_2:
	 		return 0x01;
	 	 case HIGTAG_1S:
	 		return 0x02;
	 	 case EM400XMC200:
	 		return 0x03;
	 	 default:
	 		return 0x00;
	 }
 }
 //////error afhandeling//////////////
/**
*@brief function to handle I2C errors
*@param I2C_status status of I2C
**/
void RFID_failed_I2C(int I2C_status)
 {
   printf("RFID: I2C failed \r\n");
   RFID_error = RFID_I2C_ERROR;
   return;
 }
 
 /**
 *@brief function to handle RFID reader errors
 *@param Satus_flag received status flag 
 **/
 void RFID_failed(int Status_flag)
 {   
   printf("RFID: RS232 failed\r\n");
   RFID_error = RFID_RS232_ERROR;
   return;
 }
 
